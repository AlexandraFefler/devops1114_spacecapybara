name: CI/CD pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Create .env file
        run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build Docker image
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
          VERSION: 1.0.${{ github.run_number }}
        run: |
          docker build -t $DOCKERHUB_USER/spacecapybara_app:${VERSION} .

      # - name: Tag Docker image
      #   run: docker tag spacecapybara_app:latest ${{ secrets.DOCKER_HUB_USERNAME }}/spacecapybara:latest

      - name: Push Docker image to Docker Hub (only with ver)
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
          VERSION: 1.0.${{ github.run_number }}
        run: |
          docker push $DOCKERHUB_USER/spacecapybara_app:${VERSION}
          
      - name: Push Docker image to Docker Hub (as latest stable)
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
          VERSION: 1.0.${{ github.run_number }}
        run: |
          docker tag $DOCKERHUB_USER/spacecapybara_app:${VERSION} $DOCKERHUB_USER/spacecapybara_app:latest
          docker push $DOCKERHUB_USER/spacecapybara_app:latest

  test-container:
      runs-on: ubuntu-latest
      needs: build-and-push

      steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Create required files
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          echo "${{ secrets.INIT_SQL }}" > init.sql

      - name: Run Docker Compose
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
          VERSION: 1.0.${{ github.run_number }}
        run: |
          export DOCKERHUB_USER=${DOCKERHUB_USER}
          export VERSION=${VERSION}
          DOCKERHUB_USER=$DOCKERHUB_USER VERSION=$VERSION docker compose up -d --force-recreate
        # run: |
        #   DOCKERHUB_USER=$DOCKERHUB_USER VERSION=$VERSION docker compose up -d --force-recreate
      
      - name: Test Application with Curl
        run: |
          sleep 30  # Wait for the container to start
          docker compose logs
          if curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:5002 | grep -q "^200$"; then
              echo "Test passed: App is responding with HTTP 200."
          else
              echo "Test failed: App is not responding with HTTP 200."
              exit 1
          fi

      - name: Stop and Clean Up Containers
        run: docker compose down

  # deployment:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push # add test job too

  #   steps:
  #     - name: Connect to EC2 and deploy
  #       env:
  #         EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
  #         SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
  #         DOCKERHUB_USER: ${{ secrets.DOCKER_HUB_USERNAME }}
  #         VERSION: 1.0.${{ github.run_number }}
  #         INIT_SQL_CONTENT: ${{ secrets.INIT_SQL }}
  #         ENV_FILE_CONTENT: ${{ secrets.ENV_FILE }}
  #       run: |
  #         # Create SSH key
  #         echo "$SSH_PRIVATE_KEY" > private_key.pem
  #         chmod 600 private_key.pem

  #         # Connect to EC2 and execute deployment steps
  #         ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_PUBLIC_IP << 'EOF'
          
  #           # Ensure Docker is installed
  #           if ! command -v docker &> /dev/null; then
  #             echo "Installing Docker..."
  #             sudo apt-get update
  #             sudo apt-get install -y docker.io
  #             sudo systemctl start docker
  #             sudo systemctl enable docker
  #           fi

  #           # Ensure Docker Compose is installed
  #           if ! command -v docker-compose &> /dev/null; then
  #             echo "Installing Docker Compose..."
  #             sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  #             sudo chmod +x /usr/local/bin/docker-compose
  #           fi

  #           # Create init.sql file
  #           echo "$INIT_SQL_CONTENT" > init.sql

  #           # Create .env file
  #           echo "$ENV_FILE_CONTENT" > .env

  #           # Run docker-compose
  #           DOCKERHUB_USER=$DOCKERHUB_USER VERSION=$VERSION docker-compose up -d --force-recreate --build

  #         EOF

  #         # Clean up SSH key
  #         rm -f private_key.pem